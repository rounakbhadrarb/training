Inheritance:

main class:

package com.company;

import com.rounak.employeepack.Employee;
import com.rounak.employeepack.Manager;
import com.rounak.employeepack.Programmer;
import com.rounak.employeepack.Tax;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Employee employee1=new Employee(100,"Rounak",10000);
        System.out.println(employee1.getDetails());

        Manager m1=new Manager(200,"Rivu",45000,"HR",5);
        System.out.println(m1.getDetails());

        Programmer p1=new Programmer(300,"RounakBhadra",6000,2,"JAVA");
        System.out.println(p1.getDetails());

        //giving a base class reference to the derive class object
        //Upcasting
        Employee e1=new Manager(201,"ram",20000,"it",3);
        System.out.println(e1.getDetails());
        Manager m2=(Manager)e1;
        System.out.println("works for "+m2.getDeptName());
        //Dynamic polymorphism by upcasting
        Employee[] emparr=new Employee[4];
        emparr[0]=new Employee(100,"rounak",50000);
        emparr[1]=new Manager(200,"Rivu",6000,"hr",20);
        emparr[2]=new Programmer(300,"JB",6736,6,"JAVA");
        emparr[3]=new Programmer(400,"hu",5678,6,"jhi");

        System.out.println("printing details of employee");

        for(Employee e:emparr)
        {
            System.out.println(e.getDetails());
        }
        for(Employee e:emparr)
        {
            System.out.println(e.getDetails()+" Tax paid "+Tax.calc_Tax(e));
        }
    }
}


Employee class:

package com.rounak.employeepack;

public class Employee {
    protected int empId;
    protected String empName;
    protected int sal;

    public Employee(int empId, String empName, int sal) {
        this.empId = empId;
        this.empName = empName;
        this.sal = sal;
    }
    public String getDetails()
    {
        return(empId+" "+empName+" "+sal);
    }

    public int getSal() {
        return sal;
    }
}


Manager class:

package com.rounak.employeepack;

public class Manager extends Employee {

    private String deptName;
    private int empcount;

    public Manager(int empId, String empName, int sal, String deptName,int empcount) {
        super(empId, empName, sal);
        this.deptName=deptName;
        this.empcount=empcount;
    }
    public String getDetails()
    {
        return(super.getDetails()+"  "+deptName+" "+empcount);
    }

    public String getDeptName() {
        return deptName;
    }

    public int getEmpcount() {
        return empcount;
    }
}


Programmer class:

package com.rounak.employeepack;

public class Programmer extends Employee{
    private int noOfProjects;
    private String skillset;

    public Programmer(int empId, String empName, int sal,int noOfProjects,String skillset) {
        super(empId, empName, sal);
        this.noOfProjects=noOfProjects;
        this.skillset=skillset;
    }
    public String getDetails()
    {
        return(super.getDetails()+"  "+noOfProjects+" "+skillset);
    }

    public int getNoOfProjects() {
        return noOfProjects;
    }

    public String getSkillset() {
        return skillset;
    }
}


Tax class:

package com.rounak.employeepack;

public class Tax {
    public static double calc_Tax(Employee e)
    {
        if(e instanceof Manager)
        {
            return (e.getSal()*0.2);
        }
        else
        {
            if(e instanceof Programmer)
                return (e.getSal()*0.4);
            else
                return 0;
        }
    }

}


output:

100 Rounak 10000
200 Rivu 45000  HR 5
300 RounakBhadra 6000  2 JAVA
201 ram 20000  it 3
works for it
printing details of employee
100 rounak 50000
200 Rivu 6000  hr 20
300 JB 6736  6 JAVA
400 hu 5678  6 jhi
100 rounak 50000 Tax paid 0.0
200 Rivu 6000  hr 20 Tax paid 1200.0
300 JB 6736  6 JAVA Tax paid 2694.4
400 hu 5678  6 jhi Tax paid 2271.2000000000003

Process finished with exit code 0





Static var:

Account class:

package com.bankAccount;

import java.util.Random;

public class Account {
    private static long count;
    private final long accNo;
    private String accType;
    private double balanceAmt;

    static{
        count=0;
    }

    public static long getCount()
    {
        Random rand=new Random();
        count=rand.nextInt(100000)+100000;
        return count;
    }

    public Account(String accType, double balanceAmt) {
        this.accNo=getCount();
        this.accType = accType;
        this.balanceAmt = balanceAmt;
    }

    public void deposit(double amount)
    {
        balanceAmt+=amount;
    }

    public double withdraw(double amount)
    {
        balanceAmt-=amount;
        return amount;
    }

    public double getBalance()
    {
        return balanceAmt;
    }

    @Override
    public String toString() {
        return "Account{" +
                "accNo=" + accNo +
                ", accType='" + accType + '\'' +
                ", balanceAmt=" + balanceAmt +
                '}';
    }
}

Main class:

package com.Rounak_bank_project;

import com.bankAccount.Account;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Account acc=new Account("savings",5000);
        Account acc1=new Account("current",10000);
        acc.deposit(6000);
        System.out.println("Ammount withdrawn: "+acc.withdraw(2000));
        System.out.println(acc);

        System.out.println(acc1);
    }
}

result:

Ammount withdrawn: 2000.0
Account{accNo=179911, accType='savings', balanceAmt=9000.0}
Account{accNo=194528, accType='current', balanceAmt=10000.0}

Process finished with exit code 0


2. Abstract employee:

Main:

package com.company;

import com.company.employeepack.Employee;
import com.company.employeepack.Programmer;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Programmer p=new Programmer(200,"Rounak",3000,5,"java");
        System.out.println(p.calcNetSal());


    }
}

Employee class:

package com.company.employeepack;

public abstract class Employee {
    protected int empId;
    protected String empName;
    protected int sal;

    public Employee(int empId, String empName, int sal) {
        this.empId = empId;
        this.empName = empName;
        this.sal = sal;
    }
    public String getDetails()
    {
        return(empId+" "+empName+" "+sal);
    }

    public abstract double calcNetSal();//abstract method

    public int getSal() {
        return sal;
    }
}

Programmer:

package com.company.employeepack;

public class Programmer extends Employee{
    private int noOfProjects;
    private String skillset;

    public Programmer(int empId, String empName, int sal,int noOfProjects,String skillset) {
        super(empId, empName, sal);
        this.noOfProjects=noOfProjects;
        this.skillset=skillset;
    }
    public String getDetails()
    {
        return(super.getDetails()+"  "+noOfProjects+" "+skillset);
    }

    @Override
    public double calcNetSal() {
        return 15000;
    }

    public int getNoOfProjects() {
        return noOfProjects;
    }

    public String getSkillset() {
        return skillset;
    }
}

Manager class:

package com.company.employeepack;

public class Manager extends Employee {

    private String deptName;
    private int empcount;

    public Manager(int empId, String empName, int sal, String deptName,int empcount) {
        super(empId, empName, sal);
        this.deptName=deptName;
        this.empcount=empcount;
    }
    public String getDetails()
    {
        return(super.getDetails()+"  "+deptName+" "+empcount);
    }

    @Override
    public double calcNetSal() {
        return 20000;
    }

    public String getDeptName() {
        return deptName;
    }

    public int getEmpcount() {
        return empcount;
    }
}


output:

15000.0


3. Interface first programme:

Main:


package com.company;

public class Main {

    public static void main(String[] args) {
	// write your code here
        class1 c=new class1();
        c.m1();
        c.m4();
    }
}


Interface1.java:



package com.rounak.vpack;

public abstract class Vehicle implements Automobile{
    protected int regNo;
    protected String model;
    protected int currSpeed;

    public Vehicle(int regNo, String model, int currSpeed) {
        this.regNo = regNo;
        this.model = model;
        this.currSpeed = currSpeed;
    }

    @Override
    public String start() {
        return "vehicle started";
    }

    @Override
    public abstract  int IncreSpeed(int n);

    @Override
    public String stop() {
        return "vehicle stopped";
    }

    @Override
    public String toString() {
        return "Vehicle{" +
                "regNo=" + regNo +
                ", model='" + model + '\'' +
                ", currSpeed=" + currSpeed +
                '}';
    }
}

car:

package com.rounak.vpack;

public class Car extends Vehicle{
    private int maxSpeed;
    private String type;

    public Car(int regNo, String model, int currSpeed, int maxSpeed, String type) {
        super(regNo, model, currSpeed);
        this.maxSpeed=maxSpeed;
        this.type=type;
    }


    @Override
    public int IncreSpeed(int n) {
        if(currSpeed+n<maxSpeed)
            currSpeed+=n;
        else
            currSpeed=0;
        return(currSpeed);
    }

    @Override
    public String toString() {
        return "Car{" +
                "maxSpeed=" + maxSpeed +
                ", type='" + type + '\'' +
                ", regNo=" + regNo +
                ", model='" + model + '\'' +
                ", currSpeed=" + currSpeed +
                '}';
    }
}

output:

vehicle started
enjoy your drive
vehicle stopped

Process finished with exit code 0

